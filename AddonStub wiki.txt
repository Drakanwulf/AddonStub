# AddonStub
AddonStub is a simple, standalone, add-on stub that has been designed and coded to provide a consistent method to load standalone add-ons, including itself.  Because it is an add-on stub, it has been designed for use by developers rather than by users.

WARNING: You must be running ESO game code for the Wrathstone API (100026), or greater, for this add-on to function correctly.
## What It Is
AddonStub is a descendant of the ESOUI LibStub(r5) add-on which was derived from the World of Warcraft (WoW) LibStub add-on. Its structure should be familiar to those who know how LibStub works; however, AddonStub does some things differently than LibStub does them and AddonStub does some things that LibStub does not do.

"Standalone" means that AddonStub should not be embedded. Please load only one instance of AddonStub from the ".../Addons/" directory and use a "##DependsOn: AddonStub" directive in the manifest file for your add-on to instruct the game to verify that a AddonStub exists and is running before the game loads your add-on.

"Stub" means that AddonStub provides only an interface to help add-ons start up correctly and to prevent mistaken attempts to load the same (or older) versions of an add-on multiple times.

Do NOT embed an AddonStub folder within your add-on!
## What It Does
I do not know how accurate the following sentences are because little is written about the add-on loading process in the ESOUI wiki, but it appears that global (i.e. _G) add-on tables come into existence only when the game loads an add-on, any add-on, for your logged in account and character. Add-on tables may exist for other accounts and/or players in the game but add-on tables do not exist for your account nor for your characters until you log in and select a character to play. At this point, the game begins to load the add-on folders and files listed in your ".../Addons/" directory. See the "AddOnManager" set of API functions in the ESOUI game documentation for more information.

The premise AddonStub bases its decisions upon is the presence or absence of global control entries that AddonStub creates on behalf of the add-ons it starts up (i.e. bootstraps); therefore, any add-on whose addonName (e.g. MAJOR) matches the addonName of a global control entry (e.g. _G[MAJOR]) is, by default, an attempt by the game to load a duplicate of an existing add-on. AddonStub uses the AddOnVersion numbers in the add-on code and from the AddOnVersion: directive in the manifest file to determine what is, or is not, a duplicate.

AddonStub contains bootstrapping code to load itself plus two API functions that provide add-on start up consistency checks to ensure that both AddonStub and the add-ons it starts up bootstrap without problems.
* AddonStub creates new control entries whenever an add-on has not been loaded before.
* AddonStub resets and reloads the data in existing control enties whenever the AddOnVersion numbers are larger than the current control entry values.
* AddonStub fails older, out-of-date, add-ons whose AddonVersion number is smaller than the current control entry values.
* AddonStub API return values provide signals to either initialize, discard, or fail duplicate attempts to start the same add-on again.
	* AddonStub:Get detects and returns the control entries for duplicate start up attempts by any add-on that the game loads. The code in your add-on decides whether to discard, process, or fail the duplicates.
	* AddonStub:New returns existing control entries and their AddOnVersion numbers whenever it successfully creates new control entries or successfully resets, reloads and updates control entries for duplicate add-ons that are already running.
* AddonStub builds "manifest" tables for its add-on control entries from their manifest file directives and from data returned by the "AddOnManager" and other game API functions.

What is important to remember is this: The game has already loaded any add-on that invokes AddonStub _before_ AddonStub has performed any of its consistency checks; hence, the AddonStub consistency checks are being executed on behalf of an add-on that is already executing code and that running state is the primary reason why the AddonStub:New default actions for duplicate add-on start up attempts is to fail the running add-on by using the .lua "error()" messaging interface.
## What It Needs
AddonStub, because it is an add-on stub, does not depend on the existence or absence of any other add-on to perform its start up functions; hence, there should be no "##DependsOn:" or "##OptionalDependsOn:" directives in a legitimate "AddonStub.txt" manifest file.
## History:
AddonStub is a descendant of the ESOUI LibStub (r5) add-on which was derived from the World of Warcraft (WoW) LibStub 
library add-on. See the [WoW LibStub](http://www.wowace.com) for more information. We would like to thank everyone who helped us develop, test, and document the AddonStub add-on.
* LibStub was developed for World of Warcraft and placed into the Public Domain by members of the WowAce community: Kaelten, Cladhaire, ckknight, Mikk, Ammo, Nevcairiel, and joshborke.
* LibStub was ported from World of Warcraft and modified for use by Elder Scrolls Online by Seerah.
* LibStub was maintained, modified and updated to support game loading and other changes by Seerah, and is currently maintained and modified by sirinsidiator.
## API Functions:
### Definitions:
* Duplicate := Any add-on where the addonName in a control entry (e.g. _G["addonName"]) matches the addonName in the add-on code (e.g. "addonName" or MAJOR). AddOnVersion numbers determine what happens next when duplicates are found.
* MAJOR := Contains "AddonStub" which is the addonName of this add-on enclosed in quotation marks.
* MINOR := Contains the AddOnVersion number for this add-on. 
_Note: This number must exist in the add-on code and it must be the same as the number in the AddOnVersion: directive in the manifest file._
### AddonStub:Get( "addonName" )
If a global control entry for "addonName" exists (e.g. _G[MAJOR]), this function accesses the manifest table data in the control entry to return the values for "addonName" and "addonVersion". _Use this function to detect duplicate start up attempts when your add-on needs to determine whether to discard, fail, or continue executing code._
#### Input:
addonName := string, name of the add-on (e.g. "AddonStub"). Between 1 and 64 alphanumeric characters long.
#### Returns:
nil, nil := These return values mean this is the first time the game has loaded "addonName". If you want to detect duplicate load attempts, you should invoke the AddonStub:New API function to create a global control entry for "addonName".

addon, version := These return values indicate that the game has loaded a duplicate of "addonName".
* addon := Contains a pointer to the global control entry for _G["addonName"].
* version := Contains the AddOnVersion number for the duplicate. Your add-on code must decide whether to: 
    * discard or fail the duplicate (code = control entry).
    * fail older, out-of-date duplicates (code < control entry).
    * permit the duplicate to continue executing (code > control entry).
### AddonStub:New( "addonName", version )
This function creates new or resets existing global control entries (e.g. _G[MAJOR]) for "addonName". The function creates new control entries whenever an add-on has never been started up before; resets and reloads existing control entries whenever the AddOnVersion number in the code (e.g. MINOR) is greater than the AddOnVersion number in the control entry; and fails all other duplicate start up attempts.
#### Input:
addonName := string, name of the add-on (e.g. "AddonStub"). Between 1 and 64 alphanumeric characters long.

version := positive integer between 1 and 2,147,483,647.  There are limited restrictions on the integer value; however, there may be unexpected and/or undesired side-effects if a "version" number is not greater than its predecessor.
#### Returns:
nil, nil := These return values mean that AddonStub refused to start up a duplicate add-on because its control entry number was older than (lesser values) or a duplicate of (equal values) the addonVersion number in the add-on code (e.g. MINOR).

addon, version := These return values mean that AddonStub successfully created or updated the control entry for "addonName".
* addon := Contains a pointer to the global control entry for _G["addonName"].
* version := Contains the AddOnVersion number extracted from the manifest file for "addonName".
## Control Entry Layout
This is the generic layout of an AddonStub control entry for any add-on. The contents in the comment fields are my informational asides and opinions.
```
_G["addonName"] = {
	addOnVersion,                    	-- AddOnVersion from the code (e.g. MINOR)
	apiVersion,							-- Current API version number from the game
	index,								-- Ordinal position of this add-on in the AddOnManager's add-on table
	manifest = {
		-- These values are returned from API functions
		fileName,						-- The file/folder/manifest name
		filePath,						-- User Path to the add-on file/folder (new as of 100026)
		isEnabled,						-- ESO boolean value
		loadState,						-- ESO load state (i.e. loaded; not loaded)
		isOutOfDate,					-- ESO boolean value

		-- These values come from the manifest file	directives
		addOnVersion,					-- From the AddonVersion: directive (new as of 100026)
		rawAuthor,						-- From the Author: directive
		rawTitle,						-- From the Title: directive
		description,					-- From the Description: directive
		author,							-- "rawAuthor" sans any special characters
		title,							-- "rawTitle" sans any special characters

		-- Fields I wish were retrievable from the manifest file
		-- OODVersion = AM:GetAPIVersion( i ),		-- The API number from the manifest file
	},
}
```
## Example
This code illustrates how a stand-alone add-on uses AddonStub return values to process valid duplicate start up attempts and to fail all duplicate start up mistakes because trapping them is one way to determine who was doing what and when which should give us the why.
```
--[[--------------------------------------------------------------------------------------------------------------------------------
Same variables for AddonStub as for LibStub except MINOR must match the AddOnVersion number in the manifest.
----------------------------------------------------------------------------------------------------------------------------------]]
local MAJOR, MINOR = "addonName", 1

--[[--------------------------------------------------------------------------------------------------------------------------------
Code to trap and fail duplicate start up attempts.
----------------------------------------------------------------------------------------------------------------------------------]]
local addon, version = AddonStub:Get( MAJOR )
if addon then
	assert( version < MINOR, "addonName: Add-on is already loaded. Do NOT load addonName multiple times!" )
end

--[[--------------------------------------------------------------------------------------------------------------------------------
Code to create new control entries or to update existing control entries for duplicate start up attempts.
----------------------------------------------------------------------------------------------------------------------------------]]
local addon, version = AddonStub:New( MAJOR, MINOR )
assert( addon, "addonName: AddonStub failed to create a control entry!" )

--[[--------------------------------------------------------------------------------------------------------------------------------
... And add-on initialization continues on from here...
----------------------------------------------------------------------------------------------------------------------------------]]
```
This code illustrates how a stand-alone library add-on uses AddonStub return values to either discard, fail, or process duplicate start up attempts.
```
--[[--------------------------------------------------------------------------------------------------------------------------------
Local variables shared by multiple functions within this add-on.
----------------------------------------------------------------------------------------------------------------------------------]]
local strformat = string.format

--[[--------------------------------------------------------------------------------------------------------------------------------
Same variables for AddonStub as for LibStub except MINOR must match the AddOnVersion number in the manifest.
----------------------------------------------------------------------------------------------------------------------------------]]
local MAJOR, MINOR = "addonName", 1

--[[--------------------------------------------------------------------------------------------------------------------------------
Code to trap duplicate start up attempts and to: discard duplicate add-on start ups; fail older, out-of-date, add-on start 
ups; or, to permit newer, updated add-on start ups to continue.
----------------------------------------------------------------------------------------------------------------------------------]]
local addon, version = AddonStub:Get( MAJOR )
if addon then
	if version = MINOR then
		return
	elseif version > MINOR
		error( strformat( "addonName:V%q: Will not load older versions of itself!", tostring( version ) ), 2 )
	end
end

--[[--------------------------------------------------------------------------------------------------------------------------------
Code to create new control entries or to update existing control entries for duplicate start up attempts.
----------------------------------------------------------------------------------------------------------------------------------]]
local addon, version = AddonStub:New( MAJOR, MINOR )
assert( addon, "addonName: AddonStub failed to create a control entry!" )

--[[--------------------------------------------------------------------------------------------------------------------------------
... And add-on initialization continues on from here...
----------------------------------------------------------------------------------------------------------------------------------]]
```
Your add-on code has the option to use either suggested solution or, you can opt to code something new and entirely different to handle your duplicate add-on start ups.
